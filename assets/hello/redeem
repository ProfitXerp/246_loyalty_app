import 'package:flutter/material.dart';

void main() {
  runApp(const RedeemApp());
}

class RedeemApp extends StatelessWidget {
  const RedeemApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Redeem Rewards',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const RedeemPage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class RedeemPage extends StatefulWidget {
  const RedeemPage({super.key});

  @override
  State<RedeemPage> createState() => _RedeemPageState();
}

class _RedeemPageState extends State<RedeemPage> {
  final int definedPoints = 3000;
  List<Map<String, dynamic>> matchedRewards = [];

  final List<Map<String, dynamic>> allRewardsData = [
    {
      "points": 2000,
      "rewards": [
        {
          "name": "Gear Cycle",
          "image":
              "https://plus.unsplash.com/premium_photo-1678718713393-2b88cde9605b?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA==",
        },
        {
          "name": "Muktinath Tour",
          "image":
              "https://lh3.googleusercontent.com/p/AF1QipPpgD0vf9gN8TCNy3q8gETTWfoarNkAynIqZVLB=s680-w680-h510-rw",
        },
        {
          "name": "Gift Voucher",
          "image":
              "https://img.freepik.com/free-vector/realistic-gift-voucher-banners_23-2149116210.jpg?semt=ais_hybrid&w=740",
        },
      ],
    },
    {
      "points": 3000,
      "rewards": [
        {
          "name": "Single Door Fridge",
          "image":
              "https://img.freepik.com/free-vector/refrigerator-with-closed-opened-door_1308-95206.jpg?ga=GA1.1.1314206690.1746510843&semt=ais_hybrid&w=740",
        },
        {
          "name": "Air Cooler",
          "image":
              "https://img.freepik.com/free-photo/air-conditioner-mounted-white-wall_53876-128235.jpg?semt=ais_hybrid&w=740",
        },
        {
          "name": "CCTV with DVR",
          "image":
              "https://www.shutterstock.com/image-vector/dvr-nvr-cloud-storage-ip-600nw-2138997913.jpg",
        },
        {
          "name": "Gift Voucher",
          "image":
              "https://img.freepik.com/free-vector/realistic-gift-voucher-banners_23-2149116210.jpg?semt=ais_hybrid&w=740",
        },
      ],
    },
  ];

  @override
  void initState() {
    super.initState();
    loadRewards();
  }

  void loadRewards() {
    final match = allRewardsData.firstWhere(
      (item) => item["points"] == definedPoints,
      orElse: () => {},
    );

    setState(() {
      matchedRewards =
          match.isNotEmpty
              ? List<Map<String, dynamic>>.from(match["rewards"])
              : [];
    });
  }

  void onRedeem(String reward) {
    showDialog(
      context: context,
      builder:
          (_) => AlertDialog(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
            title: const Text("🎉 Redeemed"),
            content: Text(
              "You have collected:\n\n🎁 $reward\n\nFrom XY Pvt Ltd",
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text(
                  "OK",
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ),
            ],
          ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Redeem Rewards'), centerTitle: true),
      body: Padding(
        padding: const EdgeInsets.all(20),
        child:
            matchedRewards.isEmpty
                ? const Center(
                  child: Text(
                    "No rewards available for 3000 points.",
                    style: TextStyle(fontSize: 16),
                  ),
                )
                : Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      "Your Points: $definedPoints",
                      style: const TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 20),
                    Expanded(
                      child: Container(
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(16),
                          border: Border.all(
                            color: Colors.deepPurpleAccent.withOpacity(0.2),
                            width: 1.5,
                          ),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.deepPurple.withOpacity(0.05),
                              blurRadius: 8,
                              offset: const Offset(0, 4),
                            ),
                          ],
                        ),
                        padding: const EdgeInsets.all(16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              "Available Rewards",
                              style: TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 12),
                            Expanded(
                              child: ListView.builder(
                                itemCount: matchedRewards.length,
                                itemBuilder: (context, index) {
                                  final reward = matchedRewards[index];
                                  return Padding(
                                    padding: const EdgeInsets.only(
                                      bottom: 12.0,
                                    ),
                                    child: Container(
                                      decoration: BoxDecoration(
                                        color: Colors.grey[50],
                                        borderRadius: BorderRadius.circular(12),
                                        border: Border.all(
                                          color: Colors.grey.shade300,
                                        ),
                                      ),
                                      padding: const EdgeInsets.all(12),
                                      child: Row(
                                        children: [
                                          ClipRRect(
                                            borderRadius: BorderRadius.circular(
                                              12,
                                            ),
                                            child: Image.network(
                                              reward["image"],
                                              width: 100,
                                              height: 100,
                                              fit: BoxFit.cover,
                                              errorBuilder:
                                                  (
                                                    context,
                                                    error,
                                                    stackTrace,
                                                  ) => const Icon(
                                                    Icons.broken_image,
                                                    size: 100,
                                                  ),
                                            ),
                                          ),
                                          const SizedBox(width: 16),
                                          Expanded(
                                            child: Column(
                                              crossAxisAlignment:
                                                  CrossAxisAlignment.start,
                                              children: [
                                                Text(
                                                  reward["name"],
                                                  style: const TextStyle(
                                                    fontSize: 16,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                                const SizedBox(height: 8),
                                                ElevatedButton.icon(
                                                  style: ElevatedButton.styleFrom(
                                                    backgroundColor:
                                                        Colors.deepPurple,
                                                    foregroundColor:
                                                        Colors.white,
                                                    shape: RoundedRectangleBorder(
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                            12,
                                                          ),
                                                    ),
                                                  ),
                                                  icon: const Icon(
                                                    Icons.check_circle_outline,
                                                  ),
                                                  label: const Text("Redeem"),
                                                  onPressed:
                                                      () => onRedeem(
                                                        reward["name"],
                                                      ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  );
                                },
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
      ),
    );
  }
}










// import 'package:flutter/material.dart';
// import 'package:redeem/data.dart';

// class RedeemScreen2 extends StatefulWidget {
//   final int definedPoints;

//   const RedeemScreen2({super.key, required this.definedPoints});

//   @override
//   State<RedeemScreen2> createState() => _RedeemScreenState();
// }

// class _RedeemScreenState extends State<RedeemScreen2> {
//   List<dynamic> matchedRewards = [];

//   @override
//   void initState() {
//     super.initState();
//     loadRewards();
//   }

//   void loadRewards() {
//     final match = allRewardsData.firstWhere(
//       (item) => item["points"] == widget.definedPoints,
//       orElse: () => {},
//     );

//     setState(() {
//       matchedRewards = match.isNotEmpty
//           ? List<Map<String, dynamic>>.from(match["rewards"])
//           : [];
//     });
//   }

//   void showRewardDetails(BuildContext context, Map reward) {
//     showModalBottomSheet(
//       context: context,
//       shape: RoundedRectangleBorder(
//         borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
//       ),
//       backgroundColor: Colors.white,
//       builder: (_) {
//         return Padding(
//           padding: const EdgeInsets.all(16),
//           child: SingleChildScrollView(
//             child: Column(
//               mainAxisSize: MainAxisSize.min,
//               children: [
//                 ClipRRect(
//                   borderRadius: BorderRadius.circular(16),
//                   child: Image.network(
//                     reward["image"],
//                     width: double.infinity,
//                     height: 180,
//                     fit: BoxFit.cover,
//                     errorBuilder: (context, error, stackTrace) => Icon(
//                       Icons.broken_image,
//                       size: 100,
//                     ),
//                   ),
//                 ),
//                 SizedBox(height: 16),
//                 Text(
//                   reward["name"],
//                   style: TextStyle(
//                     fontSize: 22,
//                     fontWeight: FontWeight.bold,
//                     color: Colors.deepPurple,
//                   ),
//                 ),
//                 SizedBox(height: 10),
//                 Text(
//                   reward["description"] ?? "No description available.",
//                   textAlign: TextAlign.center,
//                   style: TextStyle(fontSize: 16, color: Colors.black87),
//                 ),
//                 SizedBox(height: 12),
//                 Text(
//                   "Points: ${widget.definedPoints}",
//                   style: TextStyle(
//                     fontWeight: FontWeight.w500,
//                     fontSize: 16,
//                     color: Colors.green,
//                   ),
//                 ),
//               ],
//             ),
//           ),
//         );
//       },
//     );
//   }

//   @override
//   Widget build(BuildContext context) {
//     return SafeArea(
//       child: Scaffold(
//         appBar: AppBar(
//           title: Text(
//             "Redeem Rewards",
//             style: TextStyle(fontWeight: FontWeight.bold),
//           ),
//           centerTitle: true,
//           backgroundColor: const Color.fromARGB(255, 89, 159, 224),
//         ),
//         body: Column(
//           children: [
//             SizedBox(height: 20),
//             Text(
//               "Your Points: ${widget.definedPoints}",
//               style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
//             ),
//             SizedBox(height: 20),
//             Expanded(
//               child: Padding(
//                 padding: const EdgeInsets.symmetric(horizontal: 20),
//                 child: matchedRewards.isNotEmpty
//                     ? ListView.builder(
//                         itemCount: matchedRewards.length,
//                         itemBuilder: (context, index) {
//                           final reward = matchedRewards[index];
//                           return Padding(
//                             padding: const EdgeInsets.symmetric(vertical: 8),
//                             child: Container(
//                               decoration: BoxDecoration(
//                                 boxShadow: [
//                                   BoxShadow(
//                                     color: Colors.black.withOpacity(0.1),
//                                     blurRadius: 10,
//                                     offset: Offset(0, 5),
//                                   ),
//                                 ],
//                                 color: Colors.grey[100],
//                                 borderRadius: BorderRadius.circular(12),
//                                 border: Border.all(
//                                   color: Colors.deepPurple.withOpacity(0.3),
//                                   width: 0.8,
//                                 ),
//                               ),
//                               padding: EdgeInsets.all(10),
//                               child: Row(
//                                 children: [
//                                   ClipRRect(
//                                     borderRadius: BorderRadius.circular(12),
//                                     child: Image.network(
//                                       reward["image"],
//                                       width: 120,
//                                       height: 100,
//                                       fit: BoxFit.cover,
//                                       errorBuilder: (context, error, stackTrace) =>
//                                           Icon(Icons.broken_image, size: 80),
//                                     ),
//                                   ),
//                                   SizedBox(width: 10),
//                                   Expanded(
//                                     child: Column(
//                                       crossAxisAlignment:
//                                           CrossAxisAlignment.start,
//                                       children: [
//                                         Text(
//                                           reward["name"],
//                                           style: TextStyle(
//                                             fontSize: 18,
//                                             fontWeight: FontWeight.bold,
//                                           ),
//                                         ),
//                                         SizedBox(height: 8),
//                                         Row(
//                                           children: [
//                                             ElevatedButton(
//                                               style: ElevatedButton.styleFrom(
//                                                 backgroundColor:
//                                                     Color.fromARGB(255, 89, 159, 224),
//                                               ),
//                                               onPressed: () {
//                                                 // handle redeem logic
//                                               },
//                                               child: Text(
//                                                 'Redeem',
//                                                 style: TextStyle(
//                                                   fontWeight: FontWeight.bold,
//                                                   color: Colors.black,
//                                                 ),
//                                               ),
//                                             ),
//                                             SizedBox(width: 8),
//                                             OutlinedButton(
//                                               onPressed: () =>
//                                                   showRewardDetails(context, reward),
//                                               child: Text(
//                                                 'More',
//                                                 style: TextStyle(
//                                                   color: Colors.deepPurple,
//                                                 ),
//                                               ),
//                                             ),
//                                           ],
//                                         )
//                                       ],
//                                     ),
//                                   ),
//                                 ],
//                               ),
//                             ),
//                           );
//                         },
//                       )
//                     : Center(
//                         child: Text(
//                           "No rewards available for these points.",
//                           style: TextStyle(fontSize: 16),
//                         ),
//                       ),
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }






// splash Screen


import 'package:flutter/material.dart';
import 'package:redeem/feature/Login/screen/login_screen.dart';

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen>
    with SingleTickerProviderStateMixin {
  double _scale = 0.0;
  double _opacity = 0.0;

  @override
  void initState() {
    super.initState();

    Future.delayed(Duration(milliseconds: 90), () {
      setState(() {
        _scale = 1.0;
        _opacity = 1.0;
      });
    });

    Future.delayed(const Duration(seconds: 3), () async {
      if (mounted) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => LoginScreen()),
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: Center(
        child: AnimatedOpacity(
          duration: const Duration(milliseconds: 1200),
          opacity: _opacity,
          child: AnimatedScale(
            scale: _scale,
            duration: const Duration(milliseconds: 1200),
            curve: Curves.easeOutBack,
            child: Image.asset(
              'assets/images/logo.png',
              width: 400,
              height: 400,
            ),
          ),
        ),
      ),
    );
  }
}











import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;

class RedeemList extends StatefulWidget {
  const RedeemList({super.key});

  @override
  State<RedeemList> createState() => _RedeemListState();
}

class _RedeemListState extends State<RedeemList> {
  final _storage = const FlutterSecureStorage();
  List<dynamic> redeemData = [];
  bool isLoading = true;
 
  @override
  void initState() {
    super.initState();
    fetchRedeemData();
  }

  Future<void> fetchRedeemData() async {
    final token = await _storage.read(key: '_token');

    if (token == null) {
      print("Token not found");
      return;
    }

    try {
      final response = await http.get(
        Uri.parse('http://192.168.1.102:8000/api/redeem/item/all'),
        headers: {
          'Authorization': 'Bearer $token',
          'Accept': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        print("Redeem Data:");
        print(data);
        setState(() {
          redeemData = data;
          isLoading = false;
        });
      } else {
        print("Failed to load data: ${response.statusCode}");
      }
    } catch (e) {
      print("Error fetching data: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Redeem List")),
      body:
          isLoading
              ? const Center(child: CircularProgressIndicator())
              : ListView.builder(
                itemCount: redeemData.length,
                itemBuilder: (context, index) {
                  final item = redeemData[index];
                  return ListTile(
                    title: Text("Points: ${item['points']}"),
                    subtitle: Text("Scheme: ${item['scheme']['name']}"),
                  );
                },
              ),
    );
  }
}




















import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;

class BannerScreen extends StatefulWidget {
  const BannerScreen({super.key});

  @override
  State<BannerScreen> createState() => _BannerScreenState();
}

class _BannerScreenState extends State<BannerScreen> {
  final _storage = FlutterSecureStorage();
  List<dynamic> bannerdata = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    fetchBannerData();
  }

  Future<void> fetchBannerData() async {
    // final token = await _storage.read(key: '_token');
    final token = await _storage.read(key: '_token');

    if (token == null) {
      debugPrint('Token is empty');
      return;
    }

    try {
      final response = await http.get(
        Uri.parse('http://192.168.1.102:8000/api/banner/all'),
        headers: {'Authorization': "Bearer $token"},
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          bannerdata = data['banners'];
          isLoading = false;
        });
      } else {
        debugPrint('Failed to load banners: ${response.statusCode}');
        setState(() => isLoading = false);
      }
    } catch (e) {
      print('Error: $e');
      setState(() => isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child:
            isLoading
                ? CircularProgressIndicator()
                : bannerdata.isEmpty
                ? Text("No banners available")
                : Text(bannerdata[0]['description'] ?? 'No description'),
      ),
    );
  }
}




import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;
import 'package:redeem/feature/Login/login_screen/login_screen.dart';
import 'package:redeem/feature/Login/service/auth_service.dart';

class BannerScreen extends StatefulWidget {
  const BannerScreen({super.key});

  @override
  State<BannerScreen> createState() => _BannerScreenState();
}

class _BannerScreenState extends State<BannerScreen> {
  final AuthService _authService = AuthService();
  List<dynamic> bannerdata = [];
  bool isLoading = false;
  final _storage = FlutterSecureStorage();
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    // isLoading = true;
    fetchBannerData();
  }

  Future<void> fetchBannerData() async {
    final token = await _storage.read(key: '_token');
    if (token != null) {
      print('Token: $token');
    }

    try {
      final response = await http.get(
        Uri.parse('http://192.168.1.102:8000/api/banner/all'),
        headers: {"Authorization": "Bearer $token"},
      );
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          bannerdata = data['banners'];
          print(bannerdata);
          isLoading = false;
        });
      }
    } catch (e) {
      print(e);
      setState(() => isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            isLoading
                ? CircularProgressIndicator()
                : bannerdata.isEmpty
                ? Text('no data avaiable')
                : Text(bannerdata[0]['description']),

            ElevatedButton(
              onPressed: () {
                _authService.logout();
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => LoginScreen()),
                );
              },
              child: Text('logout'),
            ),
          ],
        ),
      ),
    );
  }
}





import 'package:flutter/material.dart';

class SegmentedControlExample extends StatefulWidget {
  @override
  _SegmentedControlExampleState createState() => _SegmentedControlExampleState();
}

class _SegmentedControlExampleState extends State<SegmentedControlExample> {
  int selectedIndex = 0;

  final List<String> segments = ['All', 'Earned', 'Redeemed'];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Segmented Control Example")),
      backgroundColor: Colors.white,
      body: Column(
        children: [
          SizedBox(height: 20),
          // Segmented Buttons
          Center(
            child: Container(
              decoration: BoxDecoration(
                color: Colors.green[50],
                borderRadius: BorderRadius.circular(30),
              ),
              padding: EdgeInsets.all(4),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: List.generate(segments.length, (index) {
                  bool isSelected = selectedIndex == index;
                  return GestureDetector(
                    onTap: () {
                      setState(() {
                        selectedIndex = index;
                      });
                    },
                    child: Container(
                      padding: EdgeInsets.symmetric(vertical: 10, horizontal: 20),
                      decoration: BoxDecoration(
                        color: isSelected ? Colors.green : Colors.transparent,
                        borderRadius: BorderRadius.circular(30),
                      ),
                      child: Text(
                        segments[index],
                        style: TextStyle(
                          color: isSelected ? Colors.white : Colors.black,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  );
                }),
              ),
            ),
          ),

          SizedBox(height: 20),

          // Show Content Based on Selection
          // Expanded(
          //   child: IndexedStack(
          //     index: selectedIndex,
          //     children: [
          //       AllPage(),
          //       EarnedPage(),
          //       RedeemedPage(),
          //     ],
          //   ),
          // ),
        ],
      ),
    );
  }
}

// Below are example pages that will show based on the selected tab.

class AllPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(child: Text("All Rewards Page", style: TextStyle(fontSize: 18)));
  }
}

class EarnedPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(child: Text("Earned Rewards Page", style: TextStyle(fontSize: 18)));
  }
}

class RedeemedPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(child: Text("Redeemed Rewards Page", style: TextStyle(fontSize: 18)));
  }
}













class SchemeDetailScreen extends StatelessWidget {
  final Scheme scheme;

  const SchemeDetailScreen({
    super.key,
    required this.scheme,
  });

  String _formatDate(String dateStr) {
    try {
      final date = DateTime.parse(dateStr);
      return DateFormat('dd MMM yyyy').format(date);
    } catch (e) {
      return dateStr; // Return original string if parsing fails
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      backgroundColor: theme.colorScheme.surface,
      appBar: AppBar(
        title: Text(
          scheme.name,
          style: theme.textTheme.titleLarge?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        backgroundColor: theme.colorScheme.primary,
        foregroundColor: theme.colorScheme.onPrimary,
        elevation: 0,
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Header Card
            Card(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              elevation: 4,
              shadowColor: theme.shadowColor.withOpacity(0.1),
              child: Container(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(16),
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      theme.colorScheme.primary.withOpacity(0.1),
                      theme.colorScheme.secondary.withOpacity(0.05),
                    ],
                  ),
                ),
                padding: const EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Scheme Details',
                      style: theme.textTheme.headlineSmall?.copyWith(
                        fontWeight: FontWeight.bold,
                        color: theme.colorScheme.primary,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Container(
                      height: 3,
                      width: 40,
                      decoration: BoxDecoration(
                        color: theme.colorScheme.primary,
                        borderRadius: BorderRadius.circular(2),
                      ),
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 16),

            // Details Card
            Card(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              elevation: 2,
              shadowColor: theme.shadowColor.withOpacity(0.1),
              child: Padding(
                padding: const EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildInfoRow(
                      context,
                      icon: Icons.label_outline,
                      label: "Name",
                      value: scheme.name,
                    ),
                    _buildDivider(),
                    _buildInfoRow(
                      context,
                      icon: Icons.category_outlined,
                      label: "Type",
                      value: scheme.type,
                    ),
                    _buildDivider(),
                    _buildInfoRow(
                      context,
                      icon: Icons.info_outline,
                      label: "Status",
                      value: scheme.status,
                      statusColor: _getStatusColor(scheme.status, theme),
                    ),
                    _buildDivider(),
                    _buildInfoRow(
                      context,
                      icon: Icons.play_arrow_outlined,
                      label: "Start Date",
                      value: _formatDate(scheme.start),
                    ),
                    _buildDivider(),
                    _buildInfoRow(
                      context,
                      icon: Icons.schedule_outlined,
                      label: "Deadline",
                      value: _formatDate(scheme.deadline),
                    ),
                    _buildDivider(),
                    _buildInfoRow(
                      context,
                      icon: Icons.account_balance_wallet_outlined,
                      label: "Default Limit",
                      value: scheme.defaultLimit,
                    ),
                    _buildDivider(),
                    _buildInfoRow(
                      context,
                      icon: Icons.rule_outlined,
                      label: "Custom Rule Limit",
                      value: scheme.rule?.limit ?? "Not specified",
                      isLastItem: true,
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(
    BuildContext context, {
    required IconData icon,
    required String label,
    required String value,
    Color? statusColor,
    bool isLastItem = false,
  }) {
    final theme = Theme.of(context);

    return Padding(
      padding: EdgeInsets.symmetric(
        vertical: isLastItem ? 8.0 : 12.0,
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: theme.colorScheme.primary.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(
              icon,
              size: 20,
              color: theme.colorScheme.primary,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: theme.textTheme.bodySmall?.copyWith(
                    color: theme.colorScheme.onSurface.withOpacity(0.7),
                    fontWeight: FontWeight.w500,
                    letterSpacing: 0.5,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  value,
                  style: theme.textTheme.bodyLarge?.copyWith(
                    fontWeight: FontWeight.w600,
                    color: statusColor ?? theme.colorScheme.onSurface,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDivider() {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 4),
      height: 1,
      color: Colors.grey.withOpacity(0.2),
    );
  }

  Color _getStatusColor(String status, ThemeData theme) {
    switch (status.toLowerCase()) {
      case 'active':
        return Colors.green;
      case 'inactive':
        return Colors.red;
      case 'pending':
        return Colors.orange;
      case 'completed':
        return Colors.blue;
      default:
        return theme.colorScheme.onSurface;
    }
  }
}
















import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:percent_indicator/linear_percent_indicator.dart';
import 'package:redeem/feature/home_page/scheme/scheme_model/scheme_model.dart';
import 'package:redeem/feature/home_page/scheme/scheme_service/scheme_service.dart';
import 'package:redeem/widgets/mytext.dart';
import 'package:shimmer/shimmer.dart';

class SchemeScreen extends StatefulWidget {
  const SchemeScreen({super.key});

  @override
  State<SchemeScreen> createState() => _SchemeScreenState();
}

class _SchemeScreenState extends State<SchemeScreen> {
  final List<Scheme> _schemes = [];
  bool _isLoading = true;
  bool _hasError = false;

  final List<Color> containerColors = [
    Colors.lightGreen[400]!,
    Colors.pink[400]!,
    Colors.orange[400]!,
    Colors.teal[400]!,
  ];

  final List<Color> containerColors2 = [
    Colors.lightGreen[200]!,
    Colors.pink[200]!,
    Colors.orange[200]!,
    Colors.teal[200]!,
  ];

  @override
  void initState() {
    super.initState();
    _loadSchemes();
  }

  void _loadSchemes() async {
    try {
      final List<Scheme> result = await SchemeService().fetchSchemes();
      setState(() {
        _schemes.addAll(result);
        _isLoading = false;
      });
    } catch (e) {
      debugPrint('Error fetching schemes: $e');
      setState(() {
        _hasError = true;
        _isLoading = false;
      });
    }
  }

  Widget _buildShimmerLoader() {
    return SizedBox(
      height: 120.h,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: 4,
        itemBuilder: (context, index) {
          return Container(
            margin: EdgeInsets.symmetric(horizontal: 5.w),
            width: 100.w,
            decoration: BoxDecoration(
              color: Colors.grey.shade300,
              borderRadius: BorderRadius.circular(20.r),
            ),
            child: Shimmer.fromColors(
              baseColor: Colors.grey.shade300,
              highlightColor: Colors.grey.shade100,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Container(height: 10.h, width: 40.w, color: Colors.white),
                  SizedBox(height: 5.h),
                  Container(height: 10.h, width: 40.w, color: Colors.white),
                  SizedBox(height: 5.h),
                  Container(height: 10.h, width: 20.w, color: Colors.white),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Center(child: _buildShimmerLoader());
    }
    if (_hasError) {
      return const Center(child: Text('Failed to load schemes.'));
    }
    if (_schemes.isEmpty) {
      return const Center(child: Text('No schemes available.'));
    }
    return SizedBox(
      height: 140.h,
      child: ListView.builder(
        padding: EdgeInsets.symmetric(vertical: 10.h),
        scrollDirection: Axis.horizontal,
        itemCount: _schemes.length,
        itemBuilder: (context, index) {
          final scheme = _schemes[index];

          // Calculate the percent for progress
          double percent = 0.0;

          if (scheme.rule == null) {
            // If rule is null, directly 100% progress
            percent = 1.0;
          } else if (scheme.totalPoints == 0) {
            // If totalPoints is 0 or null, show 0%
            percent = 0.0;
          } else if (scheme.type == "annual" && scheme.totalPoints == 1) {
            // If type is annual and totalPoints is 1, directly 100%
            percent = 1.0;
          } else if (scheme.rule!.limit != "0") {
            double limit = double.tryParse(scheme.rule!.limit) ?? 1;
            percent = (scheme.totalPoints / limit);
            if (percent > 1.0) percent = 1.0; // Cap at 100%
          } else {
            percent = 0.0; // If limit is zero, show 0%
          }

          // Calculate remaining points
          String remainingPointsText =
              scheme.rule != null
                  ? '${((double.tryParse(scheme.rule!.limit) ?? 0) - scheme.totalPoints).clamp(0, double.infinity).toStringAsFixed(0)} P required'
                  : 'No limit set';

          // Calculate days left
          int daysLeft = 0;
          try {
            final deadlineDate = DateTime.parse(scheme.deadline);
            final now = DateTime.now();
            daysLeft = deadlineDate.difference(now).inDays;
          } catch (e) {
            daysLeft = 0;
          }

          return GestureDetector(
            onTap: () {},
            child: Container(
              margin: EdgeInsets.symmetric(horizontal: 5.w),
              width: 175.w,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    containerColors[index % containerColors.length],
                    containerColors2[index % containerColors2.length],
                  ],
                  begin: Alignment.topRight,
                  end: Alignment.bottomLeft,
                ),
                borderRadius: BorderRadius.circular(20.r),
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withAlpha(200),
                    offset: const Offset(0, 4),
                    blurRadius: 10,
                  ),
                ],
              ),
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        SizedBox(
                          height: 40.h,
                          width: 35.w,
                          child: Image.asset('assets/images/coin.png'),
                        ),
                        SizedBox(width: 5.w),
                        Mytext(
                          text: scheme.totalPoints.toString(),
                          fontSize: 16.sp,
                          fontWeight: FontWeight.bold,
                          textAlign: TextAlign.center,
                          color: const Color.fromARGB(255, 99, 46, 191),
                        ),
                      ],
                    ),
                    SizedBox(height: 4.h),
                    Padding(
                      padding: EdgeInsets.symmetric(horizontal: 10.w),
                      child: LinearPercentIndicator(
                        lineHeight: 14.0,
                        animation: true,
                        animationDuration: 20,
                        percent: percent,
                        center: Text(
                          "${(percent * 100).toStringAsFixed(1)}%",
                          style: TextStyle(fontSize: 12.sp),
                        ),
                        progressColor: Colors.greenAccent,
                        backgroundColor: Colors.white,
                        barRadius: Radius.circular(20.r),
                      ),
                    ),
                    SizedBox(height: 8.h),
                    Mytext(
                      text: '$remainingPointsText ($daysLeft days left)',
                      fontSize: 10.sp,
                      fontWeight: FontWeight.bold,
                    ),
                    SizedBox(height: 8.h),
                    Mytext(
                      text: scheme.name,
                      fontSize: 14.sp,
                      fontWeight: FontWeight.bold,
                      textAlign: TextAlign.center,
                      color: const Color.fromARGB(255, 29, 98, 32),
                    ),
                  ],
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}
